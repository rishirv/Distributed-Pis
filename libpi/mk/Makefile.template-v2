######################################################################
# you should not have to modify below.
#
#
# client defined variables:
#   - TEST_SRC: test program source code.
#   - SRC: shared source code.
#   - STAFF_OBJS: .o's that are not compiled.
# 
# you can add to the targets: 
#   libs: - run to compile any needed libraries.
#   clean:
#   all:
# (note the double ::)

ifdef SUPPORT_OBJS
$(error SUPPORT_OBJS set: old var -- use COMMON_OBJS)
endif
ifdef TEST_SRC
$(error TEST_SRC set: old var -- use PROGS)
endif

#ifndef PROGS
#$(error PROGS is not set in the calling Makefile)
#endif
#export LIB

# export any makefile var that is defined.  [if we blindly export 
# cannot check what is defined in sub-make]
ifdef TTYUSB
export TTYUSB 
endif


ifdef BOOTLOADER
export BOOTLOADER
endif

ifdef GREP_STR
export GREP_STR 
endif

ifdef START
export START
endif


BOOTLOADER ?= pi-install

MAKEFLAGS += --no-print-directory
TEST_PROGS := $(patsubst %.c, %.bin, $(PROGS))
TESTS = $(TEST_PROGS)

# if CHECK is defined, do that, otherwise if RUN is defined do that.
ifeq ($(CHECK),1)
CHECK_RUN := check
else ifeq ($(RUN),1)
TEST_RUN   := $(patsubst %.c, %.run, $(PROGS))
endif

# handle .S and .c
COMMON_OBJS := $(COMMON_OBJS) $(COMMON_SRC:.c=.o)
COMMON_OBJS := $(COMMON_OBJS:.S=.o)
COMMON_OBJS := $(COMMON_OBJS:.s=.o)
COMMON_OBJS := $(COMMON_OBJS) 


LIB_OBJS := $(LIB_SRC:.c=.o)
LIB_OBJS := $(LIB_OBJS:.S=.o)

TEST_OBJS   := $(PROGS:.c=.o)
ifdef TEST_ASM
TEST_ASM_OBJS   := $(PROGS:.c=-asm.o)
endif
TEST_LIST   := $(PROGS:.c=.list)
TEST_ELF   := $(PROGS:.c=.elf)
TEST_DEP   := $(PROGS:.c=.d)
TEST_TMP   := $(PROGS:.c=.test) $(PROGS:.c=.raw)

# enable "make emit"
ifdef STAFF
ENABLE_EMIT :=1
endif

# wait: you need src too?
dep := $(patsubst %.c, %.d, $(PROGS)) 
dep := $(dep) $(LIB_OBJS:.o=.d) $(START:.o=.d) $(COMMON_OBJS:.o=.d) 
VPATH := $(sort $(dir $(dep)))

.SUFFIXES: .run

# ugh: includes defines it
include $(CS140E_2023_PATH)/libpi/defs.mk
# CFLAGS += -Wno-unused-function -Wno-unused-variable  $(EXTRA_CFLAGS)
CFLAGS += $(EXTRA_CFLAGS)
CFLAGS += -MMD

ifndef MK_CHK
    MK_CHK := $(LPP)/mk/Makefile.check-v2
endif

LIBS += $(LIB) $(LPI) 

# add the memmap file, libpi and the makefile as dependencies
# libpi serves as a sentinal covering everything in libpi
DEPS += $(MEMMAP) ./Makefile $(LPI) $(LPP)/mk/Makefile.template-v2

ALL_OBJS := $(COMMON_OBJS) $(STAFF_OBJS) 

all:: libs $(LIB) $(TEST_PROGS) $(TEST_RUN)#  $(CHECK_RUN) 

print:
	# COMMON_OBJS = <$(COMMON_OBJS)>
	# TEST_ASM_OBJS = <$(TEST_ASM_OBJS)>
	# LIB_OBJS = <$(LIB_OBJS)>
	# START = <$(START)>

# double colon is so user can add transparently.
libs:: FORCE
ifneq ($(LIB),libpi.a)
ifneq ($(LIB),libpi-fp.a)
	@make -s -C $(LPP)
endif
endif

FORCE:

ifneq ($(LIB),libpi.a)
ifneq ($(LIB),libpi-fp.a)
$(LPI):
	@make -s -C $(LPP)
endif
endif

# why does adding <libs> cause this to fail??
gen-binaries:  $(TEST_PROGS)

# we delete the archive before creating so that the hack of
# having duplicate symbols in it resolved in order works.
# otherwise it *appears* we need to use the 
# put-your-src-here.mk hack.
$(LIB): $(LIB_OBJS) $(STAFF_LIB_OBJS) $(DEPS) $(LINK_DEPS)
	@rm -f $@
	$(AR) crf $@ $(LIB_OBJS) $(STAFF_LIB_OBJS)
	$(OD) -d $@ > $@.list


.PHONEY: gen-binaries libs FORCE

$(COMMON_OBJS): $(DEPS)

ifndef TEST_ASM
%.elf: %.o $(ALL_OBJS) $(DEPS) $(START) $(LIBS) 
	$(LD) $(LDFLAGS) $(START)  $< $(ALL_OBJS) -T $(MEMMAP) -o $@  $(LIBS) $(LIB_POST)
else
# we put the assembly code right after start to guarantee it always
# begins at the same address.
%.elf: %.o %-asm.o $(ALL_OBJS) $(DEPS) $(START) $(LIBS)
	$(LD) $(LDFLAGS) $(START) $*-asm.o $< $(ALL_OBJS) -T $(MEMMAP) -o $@  $(LIBS) $(LIB_POST)
endif

ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),cleanall)
-include $(dep)  # include dep files
endif
endif

%.o: %.c  $(DEPS)
	$(CC) $(CFLAGS) -c $< -o $@
%.o: %.S $(DEPS)
	$(CC) $(CPP_ASFLAGS) -c $< -o $@


#./%.d: %.c $(DEPS)
#	$(CC) $(CFLAGS) $< -MMD $(@:.d=.o) >$@
#./%.d: %.S $(DEPS)
#	$(CC) $(CPP_ASFLAGS) -c $< -MMD $(@:.d=.o) >$@

%.list: %.elf
	$(OD) -d   $*.elf > $*.list
%.bin: %.list
	$(OCP) $*.elf -O binary $*.bin
%.run: %.bin
	$(BOOTLOADER) $(TTYUSB) ./$<

#ifneq ($(CAN_EMIT), 0)
#emit: libs $(DEPS) $(TEST_PROGS)
#	@make -e -f $(MK_CHK) emit "TESTS=$(TEST_PROGS)"
#endif
#
#run: libs $(DEPS) $(TEST_PROGS)
#	@make -f $(MK_CHK) run "TESTS=$(TEST_PROGS)"
#check: libs $(DEPS) $(TEST_PROGS)
###	@make -f $(MK_CHK) check "TESTS=$(TEST_PROGS)"

#update:
#	cp *.out ../code

tags: 
	ctags *.[chSs] $(LPP)/*.[Ssch] $(LPP)/*/*.[chSs]

# note: double :: is so user can add transparently
clean::
	rm -f $(NAME) *~ tags $(COMMON_OBJS) Makefile.bak *.d $(TEST_OBJS) *.raw *.test $(TEST_ASM_OBJS) $(LIB_OBJS) # $(LIB) 
	rm -f $(TEST_LIST) $(TEST_ELF) $(TEST_DEP) $(TEST_TMP) $(TEST_PROGS)

#@rm -f $(TEST_TMP)

.PHONY: libs all tags clean run update


# stop make from deleting these suffix'd files.
.PRECIOUS: %.list %.elf %.o %.d


ifneq ($(DEFINE_CHECK),0)
include $(MK_CHK)
endif
