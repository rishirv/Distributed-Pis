/*
 * implement these.  ordered in difficulty.
 */
#include "rpi-asm.h"

@ return the current stack pointer.
MK_FN(rpi_get_sp)
    asm_todo("implement this")
    bx lr

MK_FN(rpi_cswitch)
    @bl rpi_print_regs 

    push {r0-r12,lr}

    @getting the cpsr
    mrs r4, cpsr 
    
    @shoving it onto the top of sched stack
    push {r4}

    str sp, [r0] @placing my updated sp at the address they gave

    mov  sp, r1 @moving to the new context
   
    @sbl rpi_print_regs 
    @loading the correct cpsr, note ints will be on
    pop {r0}
    msr cpsr, r0

    @swithcing ints off quickly
    @msr cpsr_c, #0b11010011 @switches to super with interrupts off

    pop {r0-r12,lr}

    @push {r0-r12,lr}
    @mov r0, lr
    @mrs r1, cpsr
    @bl rpi_simple_trace
    @pop {r0-r12,lr}

    msr cpsr_c, #0b00010011 @switches interrupts back on`` 
    prefetch_flush(r12)

    bx lr

@ [Make sure you can answer: why do we need to do this?]
@
@ use this to setup each thread for the first time.
@ setup the stack so that when cswitch runs it will:
@	- load address of <rpi_init_trampoline> into LR
@	- <code> into r1, 
@	- <arg> into r0
@ 
MK_FN(rpi_init_trampoline)
    @assuming r5 holds args
    @assuming r6 holds the code

    mov r0, r5
    mov r1, r6
    
    blx r1 @runs code 
    b rpi_exit

@ Hanldes a timer interrupt w/ preemptive threading
@ switches back to super and dumps the regs on the stack
@ passes sp to r0, jumps to c funtion 
MK_FN(rpi_time_int)
   @ This function shoves the new lr onto the stack of the super mode, then shoves all the registers onto super mode stack before jumping to the transition function in IRQ mode. 
    push {r0}
    sub r0, lr, #4 
    msr cpsr_c, #0b11010011 @switches to super with interrupts off
    @write lr unsure if the move is needed 
    mov lr, r0
    push {r12,lr}
    @switch to irq
    msr cpsr_c, #0b11010010 @switches to IRQ with interrupts off
    pop {r0}
    
    @ grabbing the spsr to push onto stack 
    msr spsr, #0b11010011 @sturns interrupts off 
    mrs r12,spsr

    @switch to super 
    msr cpsr_c, #0b11010011 @switches to super with interrupts off
    push {r0-r11}

    @ideally this places the spsr on top of thread stack
    push {r12}

    mov r0, sp
    @ switch back to IRQ 
    msr cpsr_c, #0b11010010 @switches to IRQ with interrupts off
    @then jump 
    b c_enter_transition @c func handles sp swaps 

@enters a new thread control block
@r0 contains new sp to enter
@No need to dump current registers
@ensures intterupts are handled 
MK_FN(c_enter)
    
    msr cpsr_c, #0b11010011 @switches to super with interrupts off

    mov sp, r0 @jumping to new context 
    
    @ideally this is the cpsr of the sched
    pop {r0} 
    msr cpsr, r0

    pop {r0-r12,lr} @loads all registers!

    @msr cpsr_c, #0b00010011 @enable interrupts 
    bx lr
    
MK_FN(start_scheduler_th)
    mov sp, r0
    @getting rid of the first saved context
    pop {r0} 
    pop {r0-r12,lr}
    bx lr


    @just gonna trash the r12 for now
MK_FN(fake_int)
    add lr, lr, #4
    mov r12, lr
    msr cpsr_c, #0b11010010 @switches to irq mode
    mov sp, #INT_STACK_ADDR
    mov lr, r12 
    b rpi_time_int 




MK_FN(c_swtch2)
    @we assume we are in IRQ
    
    

