// engler, cs140e: starter code for trivial threads package.
#include "rpi.h"
#include "rpi-thread.h"
#include "timer-interrupt.h"

// tracing code.  set <trace_p>=0 to stop tracing
enum { trace_p = 1};
#define th_trace(args...) do {                          \
    if(trace_p) {                                       \
        trace(args);                                   \
    }                                                   \
} while(0)

/***********************************************************************
 * datastructures used by the thread code.
 *
 * you don't have to modify this.
 */

#define E rpi_thread_t
#include "libc/Q.h"

// currently only have a single run queue and a free queue.
// the run queue is FIFO.
static Q_t runq, freeq;
static rpi_thread_t *cur_thread;        // current running thread.
static rpi_thread_t *scheduler_thread;  // first scheduler thread.

// monotonically increasing thread id: won't wrap before reboot :)
static unsigned tid = 1;

/***********************************************************************
 * simplistic pool of thread blocks: used to make alloc/free faster (plus,
 * our kmalloc doesn't have free (other than reboot).
 *
 * you don't have to modify this.
 */

// total number of thread blocks we have allocated.
static unsigned nalloced = 0;

// keep a cache of freed thread blocks.  call kmalloc if run out.
static rpi_thread_t *th_alloc(void) {
    rpi_thread_t *t = Q_pop(&freeq);

    if(!t) {
        t = kmalloc_aligned(sizeof *t, 8);
        nalloced++;
    }
#   define is_aligned(_p,_n) (((unsigned)(_p))%(_n) == 0)
    demand(is_aligned(&t->stack[0],8), stack must be 8-byte aligned!);
    t->tid = tid++;
    return t;
}

static void th_free(rpi_thread_t *th) {
    // push on the front in case helps with caching.
    Q_push(&freeq, th);
}

static inline uint32_t cpsr_get(void){
    uint32_t cpsr;
    asm volatile("mrs %0,cpsr" : "=r" (cpsr));
    return cpsr;
}
/***********************************************************************
 * implement the code below.
 */

// TODO update this to reflect the offsets for a full reg list!!! 

// stack offsets we expect.
enum 
    {
    CPSR_OFFSET = 0,
    R0_OFFSET,
    R1_OFFSET,
    R2_OFFSET,
    R3_OFFSET,
    R4_OFFSET,
    R5_OFFSET,
    R6_OFFSET,
    R7_OFFSET,
    R8_OFFSET,
    R9_OFFSET,
    R10_OFFSET,
    R11_OFFSET,
    R12_OFFSET,
    R14_OFFSET = 14,
    LR_OFFSET = 14
};

// return pointer to the current thread.  
rpi_thread_t *rpi_cur_thread(void) {
    return cur_thread;
}

// create a new thread.
rpi_thread_t *rpi_fork(void (*code)(void *arg), void *arg) {
    rpi_thread_t *t = th_alloc();
  

    // write this so that it calls code,arg.
    void rpi_init_trampoline(void);

    /*
     * must do the "brain surgery" (k.thompson) to set up the stack
     * so that when we context switch into it, the code will be
     * able to call code(arg).
     *
     *  1. write the stack pointer with the right value.
     *  2. store arg and code into two of the saved registers.
     *  3. store the address of rpi_init_trampoline into the lr
     *     position so context switching will jump there.
     */
  //  todo("initialize thread stack");
  //   Check on this should they be cast straight to int? 
    
    t->saved_sp = t->stack + (THREAD_MAXSTACK-16);
    
// placing cpsr first
    t->saved_sp[CPSR_OFFSET] = cpsr_get(); 
    t->saved_sp[R5_OFFSET] = (uint32_t)arg;
    t->saved_sp[R6_OFFSET] = (uint32_t)code;
   t->saved_sp[LR_OFFSET] = (uint32_t)rpi_init_trampoline;
 
    
    t->fn = code;
    t->arg = arg;

  //  th_trace("rpi_fork: tid=%d, code=[%p], arg=[%x], saved_sp=[%p]\n",
    //        t->tid, code, arg, t->saved_sp);

    Q_append(&runq, t);

    return t;
}


// exit current thread.
//   - if no more threads, switch to the scheduler.
//   - otherwise context switch to the new thread.
//     make sure to set cur_thread correctly!
void rpi_exit(int exitcode) {
    trace("error hit exit we should not have! \n");
    clean_reboot();
    // when you switch back to the scheduler thread:
    rpi_thread_t* old = cur_thread;

    Q_push(&freeq,cur_thread);
    if(Q_empty(&runq)){
        cur_thread = scheduler_thread;
         th_trace("done running threads, back to scheduler\n");
        rpi_cswitch(&(old->saved_sp),scheduler_thread->saved_sp);
    }else {
          cur_thread  = Q_pop(&runq);
          rpi_cswitch(&(old->saved_sp), cur_thread->saved_sp);
    }
}

// yield the current thread.
//   - if the runq is empty, return.
//   - otherwise: 
//      * add the current thread to the back 
//        of the runq (Q_append)
//      * context switch to the new thread.
//        make sure to set cur_thread correctly!
void rpi_yield(void) {
    if(Q_empty(&runq)){
        return;
    }
     Q_append(&runq,cur_thread);
      rpi_thread_t* old = cur_thread; 
        rpi_thread_t* new = Q_pop(&runq);
        cur_thread = new; 
    // if you switch, uncomment
  //    th_trace("switching from tid=%d to tid=%d\n", old->tid, new->tid);
        rpi_cswitch(&(old->saved_sp),new->saved_sp);
 //   todo("implement the rest of rpi_yield");
}

/*
 * starts the thread system.  
 * note: our caller is not a thread!  so you have to 
 * create a fake thread (assign it to scheduler_thread)
 * so that context switching works correctly.   your code
 * should work even if the runq is empty.
 */
void rpi_thread_start(void) {
    th_trace("starting threads!\n");
    
    trace("what is happening \n");
   // no other runnable thread: return.
    if(Q_empty(&runq))
        goto end;

    // setup scheduler thread block.
    if(!scheduler_thread) {
        trace("making sched thread \n");
        scheduler_thread = rpi_fork(rpi_scheduler,(void*)'I');
        cur_thread = scheduler_thread;
       
        // getting the thread out of the q, will clean up later if I ever fix things
        rpi_thread_t* thread = Q_pop(&runq);
        while(thread->saved_sp != scheduler_thread->saved_sp){
            Q_append(&runq,thread);
            thread = Q_pop(&runq);
        }
    }
        // taking the scheduler off the runq dont want to think about that too hard
        trace("starting sched thread\n");
        start_scheduler_th(scheduler_thread->saved_sp);
    trace("shouldn't be here \n");
end:
    th_trace("done with all threads, returning\n");
}

void rpi_scheduler(void* empty){ 
    trace("made it into sched thread\n");
    int_init();
    timer_interrupt_init(0x3000);
    system_enable_interrupts();
    
    while(!Q_empty(&runq)){
        cur_thread = Q_pop(&runq);
        trace("entering c_switch \n");
        //okay we will try enabling interrupts here 

        //clear timer int
      //  dev_barrier();
        PUT32(arm_timer_IRQClear, 1);
        //enable system interrupts
     //   dev_barrier();
        // consider resetting timer?
        rpi_cswitch(&scheduler_thread->saved_sp,cur_thread->saved_sp);
        trace("running a new thread\n\n");
    }
    trace("finishing scheduler\n");
    clean_reboot();
}
// helper: called from asm, stores the sp it was given, clears timer, 
// passes scheduler sp to second half of context switch asm. 


void rpi_simple_trace(uint32_t* arg1, uint32_t* arg2){
    trace("\nI\n");
    trace("lr reg is %x, dereferenced it is %x\n",arg1,*arg1);
    trace("spsr reg is %x, dereferenced it is %x\n", arg2, *arg2);
    //clean_reboot();
}

// helper routine: can call from assembly with r0=sp and it
// will print the stack out.  it then exits.
// call this if you can't figure out what is going on in your
// assembly.
void rpi_print_regs(uint32_t *sp) {
    printk("made it to regs\n");
    // use this to check that your offsets are correct.
    printk("cur-thread=%d\n", cur_thread->tid);
    printk("sp=%p\n", sp);

    // stack pointer better be between these.
    printk("stack=%p\n", &cur_thread->stack[THREAD_MAXSTACK]);
    assert(sp < &cur_thread->stack[THREAD_MAXSTACK]);
    assert(sp >= &cur_thread->stack[0]);
    for(unsigned i = 0; i < 13; i++) {
        unsigned r = i == 12 ? 14 : i ;
        printk("sp[%d]=r%d=%x\n", i, r, sp[i]);
    }
    //clean_reboot();
}
void c_enter_transition(void* arg){
    cur_thread->saved_sp = (uint32_t*)arg; 

     Q_append(&runq, cur_thread);

    cur_thread = scheduler_thread;
    // now load in thread from scheduler and jump to asm
    //trace("hitting c enter back to sched \n");
    c_enter(scheduler_thread->saved_sp);
}

